/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.bing.ecommerce.ingestion;

import com.microsoft.bing.ecommerce.ingestion.models.Index;
import com.microsoft.bing.ecommerce.ingestion.models.IndexResponse;
import com.microsoft.bing.ecommerce.ingestion.models.IndexStatusResponse;
import com.microsoft.bing.ecommerce.ingestion.models.PushDataUpdateResponse;
import com.microsoft.bing.ecommerce.ingestion.models.PushUpdateStatusResponse;
import com.microsoft.bing.ecommerce.ingestion.models.SchemaDetectionResponse;
import com.microsoft.bing.ecommerce.ingestion.models.TransformationConfigResponse;
import com.microsoft.bing.ecommerce.ingestion.models.TransformationTryoutResponse;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;
import com.microsoft.rest.RestClient;

/**
 * The interface for BingECommerceIngestion class.
 */
public interface BingECommerceIngestion {
    /**
     * Gets the REST client.
     *
     * @return the {@link RestClient} object.
    */
    RestClient restClient();

    /**
     * The default base URL.
     */
    String DEFAULT_BASE_URL = "https://www.bingapis.com/api/v1";

    /**
     *
     * @param tenantid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse createIndex(String tenantid);

    /**
     *
     * @param tenantid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> createIndexAsync(String tenantid, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> createIndexAsync(String tenantid);

    /**
     *
     * @param tenantid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> createIndexWithServiceResponseAsync(String tenantid);
    /**
     *
     * @param tenantid the String value
     * @param subscriptionId the String value
     * @param body the Index value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse createIndex(String tenantid, String subscriptionId, Index body);

    /**
     *
     * @param tenantid the String value
     * @param subscriptionId the String value
     * @param body the Index value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> createIndexAsync(String tenantid, String subscriptionId, Index body, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param subscriptionId the String value
     * @param body the Index value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> createIndexAsync(String tenantid, String subscriptionId, Index body);

    /**
     *
     * @param tenantid the String value
     * @param subscriptionId the String value
     * @param body the Index value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> createIndexWithServiceResponseAsync(String tenantid, String subscriptionId, Index body);

    /**
     *
     * @param tenantid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse getAllIndexes(String tenantid);

    /**
     *
     * @param tenantid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> getAllIndexesAsync(String tenantid, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> getAllIndexesAsync(String tenantid);

    /**
     *
     * @param tenantid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> getAllIndexesWithServiceResponseAsync(String tenantid);
    /**
     *
     * @param tenantid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse getAllIndexes(String tenantid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param subscriptionId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> getAllIndexesAsync(String tenantid, String subscriptionId, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> getAllIndexesAsync(String tenantid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> getAllIndexesWithServiceResponseAsync(String tenantid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse deleteIndex(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> deleteIndexAsync(String tenantid, String indexid, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> deleteIndexAsync(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> deleteIndexWithServiceResponseAsync(String tenantid, String indexid);
    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse deleteIndex(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> deleteIndexAsync(String tenantid, String indexid, String subscriptionId, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> deleteIndexAsync(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> deleteIndexWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse updateIndex(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> updateIndexAsync(String tenantid, String indexid, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> updateIndexAsync(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> updateIndexWithServiceResponseAsync(String tenantid, String indexid);
    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param body the Index value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse updateIndex(String tenantid, String indexid, String subscriptionId, Index body);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param body the Index value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> updateIndexAsync(String tenantid, String indexid, String subscriptionId, Index body, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param body the Index value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> updateIndexAsync(String tenantid, String indexid, String subscriptionId, Index body);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param body the Index value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> updateIndexWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId, Index body);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse getIndex(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> getIndexAsync(String tenantid, String indexid, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> getIndexAsync(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> getIndexWithServiceResponseAsync(String tenantid, String indexid);
    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexResponse object if successful.
     */
    IndexResponse getIndex(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexResponse> getIndexAsync(String tenantid, String indexid, String subscriptionId, final ServiceCallback<IndexResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<IndexResponse> getIndexAsync(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexResponse object
     */
    Observable<ServiceResponse<IndexResponse>> getIndexWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexStatusResponse object if successful.
     */
    IndexStatusResponse getIndexStatus(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexStatusResponse> getIndexStatusAsync(String tenantid, String indexid, final ServiceCallback<IndexStatusResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexStatusResponse object
     */
    Observable<IndexStatusResponse> getIndexStatusAsync(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexStatusResponse object
     */
    Observable<ServiceResponse<IndexStatusResponse>> getIndexStatusWithServiceResponseAsync(String tenantid, String indexid);
    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the IndexStatusResponse object if successful.
     */
    IndexStatusResponse getIndexStatus(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<IndexStatusResponse> getIndexStatusAsync(String tenantid, String indexid, String subscriptionId, final ServiceCallback<IndexStatusResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexStatusResponse object
     */
    Observable<IndexStatusResponse> getIndexStatusAsync(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the IndexStatusResponse object
     */
    Observable<ServiceResponse<IndexStatusResponse>> getIndexStatusWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PushDataUpdateResponse object if successful.
     */
    PushDataUpdateResponse pushDataUpdate(String body, String tenantid, String indexid);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PushDataUpdateResponse> pushDataUpdateAsync(String body, String tenantid, String indexid, final ServiceCallback<PushDataUpdateResponse> serviceCallback);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushDataUpdateResponse object
     */
    Observable<PushDataUpdateResponse> pushDataUpdateAsync(String body, String tenantid, String indexid);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushDataUpdateResponse object
     */
    Observable<ServiceResponse<PushDataUpdateResponse>> pushDataUpdateWithServiceResponseAsync(String body, String tenantid, String indexid);
    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param notransform the Boolean value
     * @param updateid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PushDataUpdateResponse object if successful.
     */
    PushDataUpdateResponse pushDataUpdate(String body, String tenantid, String indexid, String subscriptionId, Boolean notransform, String updateid);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param notransform the Boolean value
     * @param updateid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PushDataUpdateResponse> pushDataUpdateAsync(String body, String tenantid, String indexid, String subscriptionId, Boolean notransform, String updateid, final ServiceCallback<PushDataUpdateResponse> serviceCallback);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param notransform the Boolean value
     * @param updateid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushDataUpdateResponse object
     */
    Observable<PushDataUpdateResponse> pushDataUpdateAsync(String body, String tenantid, String indexid, String subscriptionId, Boolean notransform, String updateid);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param notransform the Boolean value
     * @param updateid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushDataUpdateResponse object
     */
    Observable<ServiceResponse<PushDataUpdateResponse>> pushDataUpdateWithServiceResponseAsync(String body, String tenantid, String indexid, String subscriptionId, Boolean notransform, String updateid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param updateid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PushUpdateStatusResponse object if successful.
     */
    PushUpdateStatusResponse pushDataStatus(String tenantid, String indexid, String updateid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param updateid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PushUpdateStatusResponse> pushDataStatusAsync(String tenantid, String indexid, String updateid, final ServiceCallback<PushUpdateStatusResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param updateid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushUpdateStatusResponse object
     */
    Observable<PushUpdateStatusResponse> pushDataStatusAsync(String tenantid, String indexid, String updateid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param updateid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushUpdateStatusResponse object
     */
    Observable<ServiceResponse<PushUpdateStatusResponse>> pushDataStatusWithServiceResponseAsync(String tenantid, String indexid, String updateid);
    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param updateid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the PushUpdateStatusResponse object if successful.
     */
    PushUpdateStatusResponse pushDataStatus(String tenantid, String indexid, String updateid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param updateid the String value
     * @param subscriptionId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<PushUpdateStatusResponse> pushDataStatusAsync(String tenantid, String indexid, String updateid, String subscriptionId, final ServiceCallback<PushUpdateStatusResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param updateid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushUpdateStatusResponse object
     */
    Observable<PushUpdateStatusResponse> pushDataStatusAsync(String tenantid, String indexid, String updateid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param updateid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the PushUpdateStatusResponse object
     */
    Observable<ServiceResponse<PushUpdateStatusResponse>> pushDataStatusWithServiceResponseAsync(String tenantid, String indexid, String updateid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse deleteTransformationConfig(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> deleteTransformationConfigAsync(String tenantid, String indexid, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> deleteTransformationConfigAsync(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> deleteTransformationConfigWithServiceResponseAsync(String tenantid, String indexid);
    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse deleteTransformationConfig(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> deleteTransformationConfigAsync(String tenantid, String indexid, String subscriptionId, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> deleteTransformationConfigAsync(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> deleteTransformationConfigWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse createOrUpdateTransformationConfig(String body, String tenantid, String indexid);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> createOrUpdateTransformationConfigAsync(String body, String tenantid, String indexid, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> createOrUpdateTransformationConfigAsync(String body, String tenantid, String indexid);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> createOrUpdateTransformationConfigWithServiceResponseAsync(String body, String tenantid, String indexid);
    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse createOrUpdateTransformationConfig(String body, String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> createOrUpdateTransformationConfigAsync(String body, String tenantid, String indexid, String subscriptionId, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> createOrUpdateTransformationConfigAsync(String body, String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param body the String value
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> createOrUpdateTransformationConfigWithServiceResponseAsync(String body, String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse getTransformationConfig(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> getTransformationConfigAsync(String tenantid, String indexid, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> getTransformationConfigAsync(String tenantid, String indexid);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> getTransformationConfigWithServiceResponseAsync(String tenantid, String indexid);
    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse getTransformationConfig(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> getTransformationConfigAsync(String tenantid, String indexid, String subscriptionId, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> getTransformationConfigAsync(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param tenantid the String value
     * @param indexid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> getTransformationConfigWithServiceResponseAsync(String tenantid, String indexid, String subscriptionId);

    /**
     *
     * @param body the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse uploadTryOutConfig(String body);

    /**
     *
     * @param body the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> uploadTryOutConfigAsync(String body, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     *
     * @param body the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> uploadTryOutConfigAsync(String body);

    /**
     *
     * @param body the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> uploadTryOutConfigWithServiceResponseAsync(String body);
    /**
     *
     * @param body the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationConfigResponse object if successful.
     */
    TransformationConfigResponse uploadTryOutConfig(String body, String subscriptionId);

    /**
     *
     * @param body the String value
     * @param subscriptionId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationConfigResponse> uploadTryOutConfigAsync(String body, String subscriptionId, final ServiceCallback<TransformationConfigResponse> serviceCallback);

    /**
     *
     * @param body the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<TransformationConfigResponse> uploadTryOutConfigAsync(String body, String subscriptionId);

    /**
     *
     * @param body the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationConfigResponse object
     */
    Observable<ServiceResponse<TransformationConfigResponse>> uploadTryOutConfigWithServiceResponseAsync(String body, String subscriptionId);

    /**
     *
     * @param tryoutid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationTryoutResponse object if successful.
     */
    TransformationTryoutResponse executeTryOutConfig(String tryoutid);

    /**
     *
     * @param tryoutid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationTryoutResponse> executeTryOutConfigAsync(String tryoutid, final ServiceCallback<TransformationTryoutResponse> serviceCallback);

    /**
     *
     * @param tryoutid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationTryoutResponse object
     */
    Observable<TransformationTryoutResponse> executeTryOutConfigAsync(String tryoutid);

    /**
     *
     * @param tryoutid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationTryoutResponse object
     */
    Observable<ServiceResponse<TransformationTryoutResponse>> executeTryOutConfigWithServiceResponseAsync(String tryoutid);
    /**
     *
     * @param tryoutid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the TransformationTryoutResponse object if successful.
     */
    TransformationTryoutResponse executeTryOutConfig(String tryoutid, String subscriptionId);

    /**
     *
     * @param tryoutid the String value
     * @param subscriptionId the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<TransformationTryoutResponse> executeTryOutConfigAsync(String tryoutid, String subscriptionId, final ServiceCallback<TransformationTryoutResponse> serviceCallback);

    /**
     *
     * @param tryoutid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationTryoutResponse object
     */
    Observable<TransformationTryoutResponse> executeTryOutConfigAsync(String tryoutid, String subscriptionId);

    /**
     *
     * @param tryoutid the String value
     * @param subscriptionId the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the TransformationTryoutResponse object
     */
    Observable<ServiceResponse<TransformationTryoutResponse>> executeTryOutConfigWithServiceResponseAsync(String tryoutid, String subscriptionId);

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaDetectionResponse object if successful.
     */
    SchemaDetectionResponse detectSchema();

    /**
     *
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SchemaDetectionResponse> detectSchemaAsync(final ServiceCallback<SchemaDetectionResponse> serviceCallback);

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetectionResponse object
     */
    Observable<SchemaDetectionResponse> detectSchemaAsync();

    /**
     *
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetectionResponse object
     */
    Observable<ServiceResponse<SchemaDetectionResponse>> detectSchemaWithServiceResponseAsync();
    /**
     *
     * @param subscriptionId the String value
     * @param format Possible values include: 'Unknown', 'LDJson', 'CSV', 'TSV', 'JsonArray'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the SchemaDetectionResponse object if successful.
     */
    SchemaDetectionResponse detectSchema(String subscriptionId, String format);

    /**
     *
     * @param subscriptionId the String value
     * @param format Possible values include: 'Unknown', 'LDJson', 'CSV', 'TSV', 'JsonArray'
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<SchemaDetectionResponse> detectSchemaAsync(String subscriptionId, String format, final ServiceCallback<SchemaDetectionResponse> serviceCallback);

    /**
     *
     * @param subscriptionId the String value
     * @param format Possible values include: 'Unknown', 'LDJson', 'CSV', 'TSV', 'JsonArray'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetectionResponse object
     */
    Observable<SchemaDetectionResponse> detectSchemaAsync(String subscriptionId, String format);

    /**
     *
     * @param subscriptionId the String value
     * @param format Possible values include: 'Unknown', 'LDJson', 'CSV', 'TSV', 'JsonArray'
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the SchemaDetectionResponse object
     */
    Observable<ServiceResponse<SchemaDetectionResponse>> detectSchemaWithServiceResponseAsync(String subscriptionId, String format);

}
