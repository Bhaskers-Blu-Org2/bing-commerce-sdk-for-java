/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.bing.ecommerce.search.models;

import java.util.List;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The RequestQuery model.
 */
public class RequestQuery {
    /**
     * The matchAll property.
     */
    @JsonProperty(value = "matchAll")
    private String matchAll;

    /**
     * The value property.
     */
    @JsonProperty(value = "value")
    private RequestQueryClauseBase value;

    /**
     * The filter property.
     */
    @JsonProperty(value = "filter")
    private ConditionBase filter;

    /**
     * The boosts property.
     */
    @JsonProperty(value = "boosts")
    private List<RequestBoostExpression> boosts;

    /**
     * The alteration property.
     */
    @JsonProperty(value = "alteration")
    private Boolean alteration;

    /**
     * The synonyms property.
     */
    @JsonProperty(value = "synonyms")
    private List<Synonym> synonyms;

    /**
     * Get the matchAll value.
     *
     * @return the matchAll value
     */
    public String matchAll() {
        return this.matchAll;
    }

    /**
     * Set the matchAll value.
     *
     * @param matchAll the matchAll value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withMatchAll(String matchAll) {
        this.matchAll = matchAll;
        return this;
    }

    /**
     * Get the value value.
     *
     * @return the value value
     */
    public RequestQueryClauseBase value() {
        return this.value;
    }

    /**
     * Set the value value.
     *
     * @param value the value value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withValue(RequestQueryClauseBase value) {
        this.value = value;
        return this;
    }

    /**
     * Get the filter value.
     *
     * @return the filter value
     */
    public ConditionBase filter() {
        return this.filter;
    }

    /**
     * Set the filter value.
     *
     * @param filter the filter value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withFilter(ConditionBase filter) {
        this.filter = filter;
        return this;
    }

    /**
     * Get the boosts value.
     *
     * @return the boosts value
     */
    public List<RequestBoostExpression> boosts() {
        return this.boosts;
    }

    /**
     * Set the boosts value.
     *
     * @param boosts the boosts value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withBoosts(List<RequestBoostExpression> boosts) {
        this.boosts = boosts;
        return this;
    }

    /**
     * Get the alteration value.
     *
     * @return the alteration value
     */
    public Boolean alteration() {
        return this.alteration;
    }

    /**
     * Set the alteration value.
     *
     * @param alteration the alteration value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withAlteration(Boolean alteration) {
        this.alteration = alteration;
        return this;
    }

    /**
     * Get the synonyms value.
     *
     * @return the synonyms value
     */
    public List<Synonym> synonyms() {
        return this.synonyms;
    }

    /**
     * Set the synonyms value.
     *
     * @param synonyms the synonyms value to set
     * @return the RequestQuery object itself.
     */
    public RequestQuery withSynonyms(List<Synonym> synonyms) {
        this.synonyms = synonyms;
        return this;
    }

}
