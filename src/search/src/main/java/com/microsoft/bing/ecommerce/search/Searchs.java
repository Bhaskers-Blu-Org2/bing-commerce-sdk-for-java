/**
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

package com.microsoft.bing.ecommerce.search;

import com.microsoft.bing.ecommerce.search.models.ECommerceSearchPostRequest;
import com.microsoft.bing.ecommerce.search.models.ECommerceSearchResponse;
import com.microsoft.rest.RestException;
import com.microsoft.rest.ServiceCallback;
import com.microsoft.rest.ServiceFuture;
import com.microsoft.rest.ServiceResponse;
import java.io.IOException;
import rx.Observable;

/**
 * An instance of this class provides access to all the operations defined
 * in Searchs.
 */
public interface Searchs {
    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ECommerceSearchResponse object if successful.
     */
    ECommerceSearchResponse post(String tenant, String index);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ECommerceSearchResponse> postAsync(String tenant, String index, final ServiceCallback<ECommerceSearchResponse> serviceCallback);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ECommerceSearchResponse object
     */
    Observable<ECommerceSearchResponse> postAsync(String tenant, String index);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ECommerceSearchResponse object
     */
    Observable<ServiceResponse<ECommerceSearchResponse>> postWithServiceResponseAsync(String tenant, String index);
    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @param body the ECommerceSearchPostRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ECommerceSearchResponse object if successful.
     */
    ECommerceSearchResponse post(String tenant, String index, ECommerceSearchPostRequest body);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @param body the ECommerceSearchPostRequest value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ECommerceSearchResponse> postAsync(String tenant, String index, ECommerceSearchPostRequest body, final ServiceCallback<ECommerceSearchResponse> serviceCallback);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @param body the ECommerceSearchPostRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ECommerceSearchResponse object
     */
    Observable<ECommerceSearchResponse> postAsync(String tenant, String index, ECommerceSearchPostRequest body);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @param body the ECommerceSearchPostRequest value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ECommerceSearchResponse object
     */
    Observable<ServiceResponse<ECommerceSearchResponse>> postWithServiceResponseAsync(String tenant, String index, ECommerceSearchPostRequest body);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ECommerceSearchResponse object if successful.
     */
    ECommerceSearchResponse get(String tenant, String index);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ECommerceSearchResponse> getAsync(String tenant, String index, final ServiceCallback<ECommerceSearchResponse> serviceCallback);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ECommerceSearchResponse object
     */
    Observable<ECommerceSearchResponse> getAsync(String tenant, String index);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ECommerceSearchResponse object
     */
    Observable<ServiceResponse<ECommerceSearchResponse>> getWithServiceResponseAsync(String tenant, String index);
    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @param mkt the String value
     * @param setlang the String value
     * @param q the String value
     * @param select the String value
     * @param orderby the String value
     * @param top the Integer value
     * @param skip the Integer value
     * @param discoverfacets the Boolean value
     * @param alteration the Boolean value
     * @param debug the Boolean value
     * @param searchinstanceid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @throws RestException thrown if the request is rejected by server
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent
     * @return the ECommerceSearchResponse object if successful.
     */
    ECommerceSearchResponse get(String tenant, String index, String mkt, String setlang, String q, String select, String orderby, Integer top, Integer skip, Boolean discoverfacets, Boolean alteration, Boolean debug, String searchinstanceid);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @param mkt the String value
     * @param setlang the String value
     * @param q the String value
     * @param select the String value
     * @param orderby the String value
     * @param top the Integer value
     * @param skip the Integer value
     * @param discoverfacets the Boolean value
     * @param alteration the Boolean value
     * @param debug the Boolean value
     * @param searchinstanceid the String value
     * @param serviceCallback the async ServiceCallback to handle successful and failed responses.
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the {@link ServiceFuture} object
     */
    ServiceFuture<ECommerceSearchResponse> getAsync(String tenant, String index, String mkt, String setlang, String q, String select, String orderby, Integer top, Integer skip, Boolean discoverfacets, Boolean alteration, Boolean debug, String searchinstanceid, final ServiceCallback<ECommerceSearchResponse> serviceCallback);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @param mkt the String value
     * @param setlang the String value
     * @param q the String value
     * @param select the String value
     * @param orderby the String value
     * @param top the Integer value
     * @param skip the Integer value
     * @param discoverfacets the Boolean value
     * @param alteration the Boolean value
     * @param debug the Boolean value
     * @param searchinstanceid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ECommerceSearchResponse object
     */
    Observable<ECommerceSearchResponse> getAsync(String tenant, String index, String mkt, String setlang, String q, String select, String orderby, Integer top, Integer skip, Boolean discoverfacets, Boolean alteration, Boolean debug, String searchinstanceid);

    /**
     *
     * @param tenant the String value
     * @param index the String value
     * @param mkt the String value
     * @param setlang the String value
     * @param q the String value
     * @param select the String value
     * @param orderby the String value
     * @param top the Integer value
     * @param skip the Integer value
     * @param discoverfacets the Boolean value
     * @param alteration the Boolean value
     * @param debug the Boolean value
     * @param searchinstanceid the String value
     * @throws IllegalArgumentException thrown if parameters fail the validation
     * @return the observable to the ECommerceSearchResponse object
     */
    Observable<ServiceResponse<ECommerceSearchResponse>> getWithServiceResponseAsync(String tenant, String index, String mkt, String setlang, String q, String select, String orderby, Integer top, Integer skip, Boolean discoverfacets, Boolean alteration, Boolean debug, String searchinstanceid);

}
